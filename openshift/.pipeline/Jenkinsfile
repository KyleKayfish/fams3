#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "frjeow-tools"
def DEV_NAMESPACE = "frjeow-dev"
def TEST_NAMESPACE = "frjeow-test"
def PROD_NAMESPACE = "frjeow-prod"

def RABBITMQ = "rabbitmq"
def SEARCH_API = "searchapi"
def ICBC_ADAPTER = "icbcmock"
def DYNAMICS_ADAPTER = "dynadapter"
def JAEGER = "jaeger"

def DOMAIN = "pathfinder.gov.bc.ca"
def SUBDOMAIN = "fams3"

def GIT_URI = "https://github.com/bcgov/fams3.git"
def GIT_REF = "feature/cicd"

def PRIVATE_GIT_URI = "git@github.com:bcgov-c/fams3-openshift.git"
def PRIVATE_GIT_REF = "master"
def PRIVATE_GIT_SECRET = "fams3-github-key"

// Todo: Change token to service account

def BUILD_MEMORY = "1Gi"
def RUN_MEMORY = "128Mi"


def StartBuildAndWait(selector, namespace) {
 echo "Starting build for ${selector} to in ${namespace}..."
 sh "oc start-build ${selector} -n ${namespace} --wait --follow"
 echo "Build complete!"
}

def WaitForDeploy(selector, namespace) {
 echo "Waiting for ${selector} to be deployed in ${namespace}..."
 sh "oc wait dc/${selector} --for=condition=Available --timeout=300s -n ${namespace}"
}

node {

 stage('Checkout') {
  dir('simple_pipeline') {
   checkout scm
  }
 }

 stage('Build') {
  openshift.withCluster() {
   openshift.withProject(TOOLS_NAMESPACE) {
    parallel(
     'SearchApi': {
         dir('simple_pipeline') {
         echo "Initiating SearchAPI build..."
         sh "oc process -f openshift/templates/search-api.bc.yaml \
                     -p NAME=${SEARCH_API} \
                     -p SOURCE_REPOSITORY_URL=${GIT_URI} \
                     -p SOURCE_REPOSITORY_REF=${GIT_REF} \
                     -p DOTNET_STARTUP_PROJECT=app/SearchApi/SearchApi.Web/SearchApi.Web.csproj \
                     -p MEMORY_LIMIT=${BUILD_MEMORY} \
                     -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
         //StartBuildAndWait("${SEARCH_API}-build", TOOLS_NAMESPACE)
         //StartBuildAndWait("${SEARCH_API}-runtime", TOOLS_NAMESPACE)
     }
     },
     'DynamicsAdapter': {
         dir('simple_pipeline') {
            echo "Initiating DynamicsAdapter build..."
            sh "oc process -f openshift/templates/dynamics-adapter.bc.yaml \
                     -p NAME=${DYNAMICS_ADAPTER} \
                     -p SOURCE_REPOSITORY_URL=${GIT_URI} \
                     -p SOURCE_REPOSITORY_REF=${GIT_REF} \
                     -p DOTNET_STARTUP_PROJECT=app/DynamicsAdapter/DynamicsAdapter.Web/DynamicsAdapter.Web.csproj \
                     -p MEMORY_LIMIT=${BUILD_MEMORY} \
                     -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
            //StartBuildAndWait("${DYNAMICS_ADAPTER}-build", TOOLS_NAMESPACE)
            //StartBuildAndWait("${DYNAMICS_ADAPTER}-runtime", TOOLS_NAMESPACE)
      }
     },
     'ICBCAdapter': {
      dir('simple_pipeline') {
       echo "Initiating ICBCAdapter build..."
       sh "oc process -f openshift/templates/icbc-adapter.bc.yaml \
                  -p NAME=${ICBC_ADAPTER} \
                  -p DOTNET_BUILD_IMAGE_STREAM_TAG=dotnet:2.2 \
                  -p DOTNET_RUNTIME_IMAGE_STREAM_TAG=dotnet-runtime:2.2 \
                  -p SOURCE_REPOSITORY_URL=${PRIVATE_GIT_URI} \
                  -p SOURCE_REPOSITORY_REF=${PRIVATE_GIT_REF} \
                  -p SOURCE_SECRET=${PRIVATE_GIT_SECRET} \
                  -p DOTNET_STARTUP_PROJECT=app/IcbcAdapter/Icbc.ServiceMock.Soap/Icbc.ServiceMock.Soap.csproj \
                  -p MEMORY_LIMIT=${BUILD_MEMORY} \
                  -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
       //StartBuildAndWait("${ICBC_ADAPTER}-build", TOOLS_NAMESPACE)
       //StartBuildAndWait("${ICBC_ADAPTER}-runtime", TOOLS_NAMESPACE)
      }
     }
    )
   }
  }
 }


 stage('Promote to DEV') {
  parallel(
   'SearchAPI': {
    dir('simple_pipeline') {
     sh "oc process -f openshift/templates/search-api.dc.yaml \
               -p NAME=${SEARCH_API} \
               -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
               -p MEMORY_LIMIT=${RUN_MEMORY} \
               -p NAMESPACE=${TOOLS_NAMESPACE} \
               -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE} --wait"
     sh "oc tag ${SEARCH-API}:latest ${SEARCH-API}:dev -n ${TOOLS_NAMESPACE}"
     WaitForDeploy(SEARCH_API, DEV_NAMESPACE)
    },
    'DynamicsAdapter': {
     dir('simple_pipeline') {
      sh "oc process -f openshift/templates/dynamics-adapter.dc.yaml \
                  -p NAME=${DYNAMICS_ADAPTER} \
                  -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
                  -p MEMORY_LIMIT=${RUN_MEMORY} \
                  -p NAMESPACE=${TOOLS_NAMESPACE} \
                  -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"
      sh "oc tag ${DYNAMICS_ADAPTER}:latest ${DYNAMICS_ADAPTER}:dev -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(DYNAMICS_ADAPTER, DEV_NAMESPACE)
     }
    },
    'ICBCAdapter': {
     dir('simple_pipeline') {
      sh "oc process -f openshift/templates/icbc-adapter.dc.yaml \
                  -p NAME=${ICBC_ADAPTER} \
                  -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
                  -p MEMORY_LIMIT=${RUN_MEMORY} \
                  -p NAMESPACE=${TOOLS_NAMESPACE} \
                  -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE} --wait"
      sh "oc tag ${ICBC_ADAPTER}:latest ${ICBC_ADAPTER}:dev -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(ICBC_ADAPTER, DEV_NAMESPACE)
     }

    },
    'RabbitMQ': {
     dir('simple_pipeline') {
      sh "oc process -f openshift/templates/rabbitmq.dc.yaml \
                  -p CLUSTER_NAME=${RABBITMQ} \
                  -p NAMESPACE=${DEV_NAMESPACE} | oc apply -f - -n ${DEV_NAMESPACE} --wait"
      // WaitForDeploy(RABBITMQ, DEV_NAMESPACE)
     }
    }
   )

  }

 }

}