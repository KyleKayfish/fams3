#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "frjeow-tools"
def DEV_NAMESPACE = "frjeow-dev"
def TEST_NAMESPACE = "frjeow-test"
def PROD_NAMESPACE = "frjeow-prod"

def RABBITMQ = "rabbitmq"
def SEARCH_API = "searchapi"
def SAMPLE_ADAPTER = "sample-adapter"

def DATA_PARTNER_REST_ADAPTER = "datapartner-rest-adapter"
def DATA_PARTNER_WEB_ADAPTER = "datapartner-web-adapter"

def ICBC_REST_ADAPTER = "icbc-rest-adapter"
def ICBC_WEB_ADAPTER = "icbc-web-adapter"

def BCHydro_REST_ADAPTER = "BCHydro-rest-adapter"
def BCHydro_WEB_ADAPTER = "BcHydro-web-adapter"

def DYNAMICS_ADAPTER = "dynadapter"
def JAEGER = "jaeger"

def DOMAIN = "pathfinder.gov.bc.ca"
def SUBDOMAIN = "fams3"

def GIT_URI = "https://github.com/bcgov/fams3.git"
def GIT_REF = "master"

def PRIVATE_GIT_URI = "git@github.com:bcgov-c/fams3-openshift.git"
def PRIVATE_GIT_REF = "master"
def PRIVATE_GIT_SECRET = "fams3-github-key"

def BUILD_MEMORY = "1Gi"
def RUN_MEMORY = "512Mi"


def StartBuildAndWait(selector, namespace) {
 echo "Starting build for ${selector} to in ${namespace}..."
 sh "oc start-build ${selector} -n ${namespace} --wait --follow"
 echo "Build complete!"
}

def WaitForDeploy(selector, namespace) {
 echo "Waiting for ${selector} to be deployed in ${namespace}..."
 sh "oc wait dc/${selector} --for=condition=Available --timeout=300s -n ${namespace}"
}

pipeline {
 agent any
 stages {

  stage('Checkout') {
   steps {
    checkout scm
   }
  }

  stage('Build') {
   steps {
    parallel(
     'Search API': {
      echo "Initiating SearchAPI build..."
      sh "oc process -f openshift/templates/search-api.bc.yaml \
         -p NAME=${SEARCH_API} \
         -p SOURCE_REPOSITORY_URL=${GIT_URI} \
         -p SOURCE_REPOSITORY_REF=${GIT_REF} \
         -p DOTNET_STARTUP_PROJECT=app/SearchApi/SearchApi.Web/SearchApi.Web.csproj \
         -p MEMORY_LIMIT=${BUILD_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
      StartBuildAndWait("${SEARCH_API}-build", TOOLS_NAMESPACE)
      StartBuildAndWait("${SEARCH_API}-runtime", TOOLS_NAMESPACE)
     },
     'Dynamics Adapter': {
      echo "Initiating DynamicsAdapter build..."
      sh "oc process -f openshift/templates/dynamics-adapter.bc.yaml \
         -p NAME=${DYNAMICS_ADAPTER} \
         -p SOURCE_REPOSITORY_URL=${GIT_URI} \
         -p SOURCE_REPOSITORY_REF=${GIT_REF} \
         -p DOTNET_STARTUP_PROJECT=app/DynamicsAdapter/DynamicsAdapter.Web/DynamicsAdapter.Web.csproj \
         -p MEMORY_LIMIT=${BUILD_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
      StartBuildAndWait("${DYNAMICS_ADAPTER}-build", TOOLS_NAMESPACE)
      StartBuildAndWait("${DYNAMICS_ADAPTER}-runtime", TOOLS_NAMESPACE)
     },
     'Sample Adapter': {
      echo "Initiating SampleAdapter build..."
      sh "oc process -f openshift/templates/sample-adapter.bc.yaml \
         -p NAME=${SAMPLE_ADAPTER} \
         -p SOURCE_REPOSITORY_URL=${GIT_URI} \
         -p SOURCE_REPOSITORY_REF=${GIT_REF} \
         -p DOTNET_STARTUP_PROJECT=app/SearchApi/SearchAdapter.Sample/SearchAdapter.Sample.csproj \
         -p MEMORY_LIMIT=${BUILD_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
      StartBuildAndWait("${SAMPLE_ADAPTER}-build", TOOLS_NAMESPACE)
      StartBuildAndWait("${SAMPLE_ADAPTER}-runtime", TOOLS_NAMESPACE)
     },
     'Data Partner Rest Adapter': {
      echo "Initiating Data Partner Rest Adapter build..."
      sh "oc process -f openshift/templates/datapartner-rest-adapter.bc.yaml \
         -p NAME=${DATA_PARTNER_REST_ADAPTER} \
         -p SOURCE_REPOSITORY_URL=${PRIVATE_GIT_URI} \
         -p SOURCE_REPOSITORY_REF=${PRIVATE_GIT_REF} \
         -p SOURCE_SECRET=${PRIVATE_GIT_SECRET} \
         -p DOTNET_STARTUP_PROJECT=src/SearchApi.Adapters/ICBC.Rest.Adapter/ICBC.Rest.Adapter.csproj \
         -p MEMORY_LIMIT=${BUILD_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
      StartBuildAndWait("${DATA_PARTNER_REST_ADAPTER}-build", TOOLS_NAMESPACE)
      StartBuildAndWait("${DATA_PARTNER_REST_ADAPTER}-runtime", TOOLS_NAMESPACE)
     },
     'Data Partner Web Adapter': {
      echo "Initiating Data Partner Web Adapter build..."
      sh "oc process -f openshift/templates/datapartner-web-adapter.bc.yaml \
         -p NAME=${DATA_PARTNER_WEB_ADAPTER} \
         -p SOURCE_REPOSITORY_URL=${PRIVATE_GIT_URI} \
         -p SOURCE_REPOSITORY_REF=${PRIVATE_GIT_REF} \
         -p SOURCE_SECRET=${PRIVATE_GIT_SECRET} \
         -p DOTNET_STARTUP_PROJECT=src/SearchApi.Adapters/ICBC.Adapter.Web/ICBC.Adapter.Web.csproj \
         -p MEMORY_LIMIT=${BUILD_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
      StartBuildAndWait("${DATA_PARTNER_WEB_ADAPTER}-build", TOOLS_NAMESPACE)
      StartBuildAndWait("${DATA_PARTNER_WEB_ADAPTER}-runtime", TOOLS_NAMESPACE)
     }
    )
   }
  }

  stage('Promote to DEV - Configure') {
   steps {
    parallel(
     'Search API': {
      sh "oc process -f openshift/templates/search-api.dc.yaml \
         -p NAME=${SEARCH_API} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"
      sh "oc tag dataprovider-rest:latest dataprovider-rest:dev -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(SEARCH_API, DEV_NAMESPACE)
     },
     'Dynamics Adapter': {
      sh "oc process -f openshift/templates/dynamics-adapter.dc.yaml \
         -p NAME=${DYNAMICS_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"
      sh "oc tag ${DYNAMICS_ADAPTER}:latest ${DYNAMICS_ADAPTER}:dev -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(DYNAMICS_ADAPTER, DEV_NAMESPACE)
     },
     'Sample Adapter': {
      sh "oc process -f openshift/templates/sample-adapter.dc.yaml \
         -p NAME=${SAMPLE_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"
      sh "oc tag ${SAMPLE_ADAPTER}:latest ${SAMPLE_ADAPTER}:dev -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(SAMPLE_ADAPTER, DEV_NAMESPACE)
     },
     'Data Partner Rest Adapter - Configure': {
      sh "oc process -f openshift/templates/icbc-rest-adapter.dc.yaml \
         -p NAME=${ICBC_REST_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"
      WaitForDeploy(ICBC_REST_ADAPTER, DEV_NAMESPACE)
     },
     'Data Partner Web Adapter - Configure': {
      sh "oc process -f openshift/templates/icbc-web-adapter.dc.yaml \
         -p NAME=${ICBC_WEB_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"
      WaitForDeploy(ICBC_WEB_ADAPTER, DEV_NAMESPACE)
     },
     'Jaeger':{
        sh "oc process -f openshift/templates/jaeger-aio.dc.yaml | oc apply -f - -n ${DEV_NAMESPACE}"
     }
    )
   }
  }

  stage('Promote to Dev - Promote Images')
  {
     steps {
        step {
                    sh "oc tag ${DATA_PARTNER_REST_ADAPTER}:latest ${DATA_PARTNER_REST_ADAPTER}:dev -n ${TOOLS_NAMESPACE}"
        }
     }
  }

  stage('Test Deploy Check'){
     steps {
        script {
            def IS_APPROVED = input(message: "Deploy to Test?", ok: "yes", parameters: [string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to Test?')])
            if (IS_APPROVED != 'yes') {
               currentBuild.result = "ABORTED"
               error "User cancelled"
            }
        }
     }
  }

  stage('Promote to TEST') {
   steps {
    parallel(
     'Search API': {
      sh "oc process -f openshift/templates/search-api.dc.yaml \
         -p NAME=${SEARCH_API} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-test.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=test | oc apply -f - -n ${TEST_NAMESPACE}"
      sh "oc tag ${SEARCH_API}:dev ${SEARCH_API}:test -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(SEARCH_API, TEST_NAMESPACE)
     },
     'Dynamics Adapter': {
      sh "oc process -f openshift/templates/dynamics-adapter.dc.yaml \
         -p NAME=${DYNAMICS_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-test.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=test | oc apply -f - -n ${TEST_NAMESPACE}"
      sh "oc tag ${DYNAMICS_ADAPTER}:dev ${DYNAMICS_ADAPTER}:test -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(DYNAMICS_ADAPTER, TEST_NAMESPACE)
     },
     'ICBC Rest Adapter': {
      sh "oc process -f openshift/templates/icbc-rest-adapter.dc.yaml \
         -p NAME=${ICBC_REST_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-test.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=test | oc apply -f - -n ${TEST_NAMESPACE}"
      sh "oc tag ${ICBC_REST_ADAPTER}:dev ${ICBC_REST_ADAPTER}:test -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(ICBC_REST_ADAPTER, TEST_NAMESPACE)
     },
     'ICBC Web Adapter': {
      sh "oc process -f openshift/templates/icbc-web-adapter.dc.yaml \
         -p NAME=${ICBC_WEB_ADAPTER} \
         -p APPLICATION_DOMAIN=${SUBDOMAIN}-test.${DOMAIN} \
         -p MEMORY_LIMIT=${RUN_MEMORY} \
         -p NAMESPACE=${TOOLS_NAMESPACE} \
         -p TAG=test | oc apply -f - -n ${TEST_NAMESPACE}"
      sh "oc tag ${ICBC_WEB_ADAPTER}:dev ${ICBC_WEB_ADAPTER}:test -n ${TOOLS_NAMESPACE}"
      WaitForDeploy(ICBC_WEB_ADAPTER, TEST_NAMESPACE)
     },
     'Jaeger':{
        sh "oc process -f openshift/templates/jaeger-aio.dc.yaml | oc apply -f - -n ${TEST_NAMESPACE}"
     }
    )
   }
  } 
 }
}