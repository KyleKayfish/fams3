#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "frjeow-tools"
def DEV_NAMESPACE = "frjeow-dev"
def TEST_NAMESPACE = "frjeow-test"
def PROD_NAMESPACE = "frjeow-prod"

def RABBITMQ_SERVICE = "rabbitmq"
def SEARCH_API = "searchapi"
def ICBC_ADAPTER = "icbcmock"
def DYNAMICS_ADAPTER = "dynadapter"

def DOMAIN = "pathfinder.gov.bc.ca"
def SUBDOMAIN = "fams3"

def GIT_URI = "https://github.com/bcgov/fams3.git"
def GIT_REF = "feature/cicd"

def PRIVATE_GIT_URI = "https://github.com/bcgov-c/fams3-openshift/"
def PRIVATE_GIT_REF = "master"

// Todo: Change token to service account

def BUILD_MEMORY = "1Gi"
def RUN_MEMORY = "128Mi"

// Function declaration
def TriggerBuild(selector, namespace){
 echo "Triggering build for ${selector} in ${namespace}"
 timeout(3)
 {
   def bcSelector = openshift.selector("bc", selector)
   bcSelector.object()
   bcSelector.startBuild("--wait")
   builds = bcSelector.related("builds")
   builds.watch {
    if (it.count() == 0) {
     return false
    }
    return true
   }
 }
}

def WaitForBuild(selector, namespace) {
 echo "Waiting for ${selector} to be build in ${namespace}..."
 timeout(time: 10, unit: 'MINUTES') {
  def bcSelector = openshift.selector("bc", selector)
  builds = bcSelector.related("builds")

  builds.untilEach {
   return it.object().status.phase == "Complete"
  }
 }
}


def WaitForDeploy(selector, namespace, statefulset = false) {

 def selectorType = 'dc'
 if (statefulset) selectorType = 'statefulset'
 echo "Waiting for ${selector} to be deployed in ${namespace}..."
 timeout(time: 180, unit: 'SECONDS') {
  def dc = openshift.selector(selectorType, selector)
  dc.rollout().status()
 }
}


//Pipeline
node {

 stage('Checkout') {
  dir('simple_pipeline') {
   checkout scm
  }
 }

 stage('Build') {
  openshift.withCluster() {
   openshift.withProject(TOOLS_NAMESPACE) {
      dir('simple_pipeline') {

       echo "Initiating SearchAPI build..."
       sh "oc process -f openshift/templates/dotnet.bc.yaml \
        -p NAME=${SEARCH_API} \
        -p SOURCE_REPOSITORY_URL=${GIT_URI} \
        -p SOURCE_REPOSITORY_REF=${GIT_REF} \
        -p DOTNET_STARTUP_PROJECT=app/SearchApi/SearchApi.Web/SearchApi.Web.csproj \
        -p MEMORY_LIMIT=${BUILD_MEMORY} \
        -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
       TriggerBuild("${SEARCH_API}-build", TOOLS_NAMESPACE)



       echo "Initiating DynamicsAdapter build..."
       sh "oc process -f openshift/templates/dotnet.bc.yaml \
        -p NAME=${DYNAMICS_ADAPTER} \
        -p SOURCE_REPOSITORY_URL=${GIT_URI} \
        -p SOURCE_REPOSITORY_REF=${GIT_REF} \
        -p DOTNET_STARTUP_PROJECT=app/DynamicsAdapter/DynamicsAdapter.Web/DynamicsAdapter.Web.csproj \
        -p MEMORY_LIMIT=${BUILD_MEMORY} \
        -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"
       TriggerBuild("${DYNAMICS_ADAPTER}-build", TOOLS_NAMESPACE)



       // This creates 2 seperate build configs we need to watch
       WaitForBuild("${SEARCH_API}-build", TOOLS_NAMESPACE)
       WaitForBuild("${SEARCH_API}-runtime", TOOLS_NAMESPACE)

       WaitForBuild("${DYNAMICS_ADAPTER}-build", TOOLS_NAMESPACE)
       WaitForBuild("${DYNAMICS_ADAPTER}-runtime", TOOLS_NAMESPACE)
      }
     }
   }
  }
 

 stage('Promote to DEV') {
  openshift.withCluster() {
   openshift.withProject(TOOLS_NAMESPACE) {
      dir('simple_pipeline') {

    echo 'Applying deployment configurations...'

    echo "SearchAPI Config"
    sh "oc process -f openshift/templates/dotnet.dc.yaml \
                  -p NAME=${SEARCH_API} \
                  -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
                  -p MEMORY_LIMIT=${RUN_MEMORY} \
                  -p NAMESPACE=${TOOLS_NAMESPACE} \
                  -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"

    echo "Dotnet Config"
    sh "oc process -f openshift/templates/dotnet.dc.yaml \
                  -p NAME=${DYNAMICS_ADAPTER} \
                  -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
                  -p MEMORY_LIMIT=${RUN_MEMORY} \
                  -p NAMESPACE=${TOOLS_NAMESPACE} \
                  -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"

    echo "RabbitMQ Config"
    sh "oc process -f openshift/templates/rabbitmq.dc.yaml \
              -p CLUSTER_NAME=${RABBITMQ} \
              -p NAMESPACE=${DEV_NAMESPACE} | oc apply -f - -n ${DEV_NAMESPACE}"
    
    sleep 10

    echo "Tagging images for DEV deployment..."
    openshift.tag("${SEARCH_API}:latest", "${SEARCH_API}:dev")
    openshift.tag("${DYNAMICS_ADAPTER}:latest", "${DYNAMICS_ADAPTER}:dev")
    openshift.tag("${RABBITMQ}:latest", "${RABBITMQ}:dev")
      }

   }
  }
 }

 stage('Wait for Dev Deployment') {
  openshift.withCluster() {
   openshift.withProject(DEV_NAMESPACE) {
    WaitForDeploy(SEARCH_API, DEV_NAMESPACE)
    WaitForDeploy(DYNAMICS_ADAPTER, DEV_NAMESPACE)
    WaitForDeploy(RABBITMQ, DEV_NAMESPACE, true)
   }
  }
 }
}