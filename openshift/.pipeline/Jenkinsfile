#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "frjeow-tools"
def DEV_NAMESPACE = "frjeow-dev"
def TEST_NAMESPACE = "frjeow-test"
def PROD_NAMESPACE = "frjeow-prod"

def RABBITMQ_SERVICE = "rabbitmq"
def SEARCH_API = "searchapi"
def ICBC_ADAPTER = "icbcmock"
def DYNAMICS_ADAPTER = "dynadapter"

def DOMAIN = "pathfinder.gov.bc.ca"
def SUBDOMAIN = "fams3"

def GIT_URI = "https://github.com/bcgov/fams3.git"
def GIT_REF = "feature/cicd"

def PRIVATE_GIT_URI = "https://github.com/bcgov-c/fams3-openshift/"
def PRIVATE_GIT_REF = "master"

// Todo: Change token to service account

def BUILD_MEMORY = "1Gi"
def RUN_MEMORY = "128Mi"

// Function declaration
def WaitForBuild(selector, namespace) {
 echo "Waiting for ${selector} to be build in ${namespace}..."
 timeout(time: 10, unit: 'MINUTES') {
  openshift.withCluster() {
   openshift.withProject("${namespace}") {
    def searchapiSelector = openshift.selector("bc", "${selector}-build")
    searchapiSelector.startBuild("--wait")
    searchapiSelector.object()
    builds = searchapiSelector.related("builds")
    builds.watch {
     if (it.count() == 0) {
      return false
     }
     return true
    }
    builds.untilEach {
     return it.object().status.phase == "Complete"
    }
   }
  }
 }
}

def WaitForDeploy(selector, namespace) {
 echo "Waiting for ${selector} to be deployed in ${namespace}..."
 timeout(time: 180, unit: 'SECONDS') {
    openshift.withCluster() {
     openshift.withProject("${DEV_NAMESPACE}") {
      def dc = openshift.selector('dc', "${SEARCH_API}")
      dc.rollout().status()
     }
    }
 }
}

//Pipeline
node {

 stage('Checkout') {
  dir('simple_pipeline') {
   checkout scm
  }
 }

 stage('Build') {
  parallel(
   'Build SearchAPI': {
    dir('simple_pipeline') {

     echo "Initiating SearchAPI build..."
     sh "oc process -f openshift/templates/dotnet.bc.yaml \
        -p NAME=${SEARCH_API} \
        -p SOURCE_REPOSITORY_URL=${GIT_URI} \
        -p SOURCE_REPOSITORY_REF=${GIT_REF} \
        -p DOTNET_STARTUP_PROJECT=app/SearchApi/SearchApi.Web/SearchApi.Web.csproj \
        -p MEMORY_LIMIT=${BUILD_MEMORY} \
        -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"

     WaitForBuild(SEARCH_API, TOOLS_NAMESPACE)
    }
   }, 
   'Build DynamicsAdapter': {
    dir('simple_pipeline') {

     echo "Initiating DynamicsAdapter build..."
     sh "oc process -f openshift/templates/dotnet.bc.yaml \
        -p NAME=${DYNAMICS_ADAPTER} \
        -p SOURCE_REPOSITORY_URL=${GIT_URI} \
        -p SOURCE_REPOSITORY_REF=${GIT_REF} \
        -p DOTNET_STARTUP_PROJECT=app/DynamicsAdapter/DynamicsAdapter.Web/DynamicsAdapter.Web.csproj \
        -p MEMORY_LIMIT=${BUILD_MEMORY} \
        -p NAMESPACE=${TOOLS_NAMESPACE} | oc apply -f - -n ${TOOLS_NAMESPACE}"

     WaitForBuild(DYNAMICS_ADAPTER, TOOLS_NAMESPACE)
    }
   })


 }

 stage('Promote to DEV') {
  openshift.withCluster() {
   echo "Tagging images for DEV deployment"
   openshift.tag("${SEARCH_API}:latest", "${SEARCH_API}:dev")
   openshift.tag("${DYNAMICS_ADAPTER}:latest", "${RABBITMQ}:dev")
  }
 }

 stage('Deploy to DEV') {
  dir('simple_pipeline') {
   echo "Deploying SearchAPI in Dev"

   sh "oc process -f openshift/templates/dotnet.dc.yaml \
                  -p NAME=${SEARCH_API} \
                  -p APPLICATION_DOMAIN=${SUBDOMAIN}-dev.${DOMAIN} \
                  -p MEMORY_LIMIT=${RUN_MEMORY} \
                  -p NAMESPACE=${TOOLS_NAMESPACE} \
                  -p TAG=dev | oc apply -f - -n ${DEV_NAMESPACE}"

   WaitForDeploy(SEARCH_API, DEV_NAMESPACE)

  }
 }

}