#!/usr/bin/env groovy

//ENV Vars
NAMESPACE_PREFIX = "dfb30e"
TOOLS_NAMESPACE = "dfb30e-tools"

GIT_REF = "ocp4"

// ===================================================================================================
// PIPELINE
// ---------------------------------------------------------------------------------------------------

pipeline {
  agent any
  stages {
    stage('Process Build Configs'){
      steps {
        echo "Processing BuildConfigs..."
        ProcessSearchAPI()
        ProcessRequestAPI()
        ProcessDynadapter()
        ProcessFMEPRestInbound()
        ProcessIASearch()
        ProcessAdapter('rest','bchydro')
        ProcessAdapter('web','bchydro')
        ProcessAdapter('web','cornet')
        ProcessAdapter('rest','icbc')
        ProcessAdapter('web','icbc')
        ProcessAdapter('rest','mhsd')
        ProcessAdapter('web','mhsd')
        ProcessAdapter('web','moh-demo')
        ProcessAdapter('rest','moh-demo')
        ProcessAdapter('rest','moh-emp')
        ProcessAdapter('web','moh-emp')
        ProcessAdapter('rest','moh-rp')
        ProcessAdapter('web','moh-rp')
        ProcessAdapter('web','wsbc')
        ProcessAdapter('file','jca')
      }
    }
    stage('Build (Pt 1)') {
      steps {
        parallel(
          'Search API': {Build('search-api')},
          'Request API': {Build('request-api')},
          'Dynadapter': {Build('dynadapter')},
          'FMEP Rest Inbound Adapter': {Build('fmep-rest-inbound-adapter')},
          'WSBC Rest Inbound Adapter': {Build('wsbc-rest-inbound-adapter')},
          'IA Search Adapter': {Build('ia-search-web-adapter')},
        )
      }
    }
    stage('Build (Pt 2)') {
      steps {
        parallel(
          'BCHydro Rest Adapter': {Build('bchydro-rest-adapter')},
          'BCHydro Web Adapter': {Build('bchydro-web-adapter')},
          'Cornet Web Adapter': {Build('cornet-web-adapter')},
          'ICBC Rest Adapter': {Build('icbc-rest-adapter')},
          'ICBC Web Adapter': {Build('icbc-web-adapter')},
          'MHSD Rest Adapter': {Build('mhsd-rest-adapter')},
          'MHSD Web Adapter': {Build('mhsd-web-adapter')},
        )
      }
    }
    stage('Build (Pt 3)') {
      steps {
        parallel(
          'MOH Demographics Rest Adapter': {Build('moh-demo-rest-adapter')},
          'MOH Demographics Web Adapter': {Build('moh-demo-web-adapter')},
          'MOH EMP Rest Adapter': {Build('moh-emp-rest-adapter')},
          'MOH EMP Web Adapter': {Build('moh-emp-web-adapter')},
          'MOH RP Rest Adapter': {Build('moh-rp-rest-adapter')},
          'MOH RP Web Adapter': {Build('moh-rp-web-adapter')},
          'WSBC Web Adapter': {Build('wsbc-web-adapter')},
          'JCA File Adapter': {Build('jca-file-adapter')}
        )
      }
    }
    stage('Dev Deploy') {
      steps {
        parallel(
          'Redis': {DeployRedis('dev')},
          'RequestAPI': {DeployRequestAPI('dev')},
          'SearchAPI': {DeploySearchAPI('dev')},
          'Dynadapter': {DeployDynadapter('dev')},
          'FMEP Rest Inbound Adapter': {DeployFMEPRestInbound('dev')},
          'WSBC Rest Inbound Adapter': {DeployWSBCRestInbound('dev')},
          'IA Search Adapter': {DeployIASearchAdapter('dev')},
          'BCHydro Rest Adapter': {DeployRestAdapter('bchydro','dev')},
          'BCHydro Web Adapter': {DeployWebAdapter('bchydro','dev')},
          'Cornet Web Adapter': {DeployWebAdapter('cornet','dev')},
          'ICBC Rest Adapter': {DeployRestAdapter('icbc','dev')},
          'ICBC Web Adapter': {DeployWebAdapter('icbc','dev')},
          'MHSD Rest Adapter': {DeployRestAdapter('mhsd','dev')},
          'MHSD Web Adapter': {DeployWebAdapter('mhsd','dev')},
          'MOH Demographics Rest Adapter': {DeployRestAdapter('moh-demo','dev')},
          'MOH Demographics Web Adapter': {DeployWebAdapter('moh-demo','dev')},
          'MOH EMP Rest Adapter': {DeployRestAdapter('moh-emp','dev')},
          'MOH EMP Web Adapter': {DeployWebAdapter('moh-emp','dev')},
          'MOH RP Rest Adapter': {DeployRestAdapter('moh-rp','dev')},
          'MOH RP Web Adapter': {DeployWebAdapter('moh-rp','dev')},
          'WSBC Web Adapter': {DeployWebAdapter('wsbc','dev')},
          'JCA File Adapter': {DeployFileAdapter('jca','dev')}
        )
      }
    }
    stage('Deploy to Test?') {
      steps {
        script {
              def IS_APPROVED = input(message: "Deploy to Test?", ok: "yes", parameters: [string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to Test?')])
              if (IS_APPROVED != 'yes') {
                currentBuild.result = "ABORTED"
                error "User cancelled"
              }
          }
      }
    }
    stage('Test Deploy') {
      steps {
        parallel(
          'Redis': {DeployRedis('test')},
          'RequestAPI': {DeployRequestAPI('test')},
          'SearchAPI': {DeploySearchAPI('test')},
          'Dynadapter': {DeployDynadapter('test')},
          'FMEP Rest Inbound Adapter': {DeployFMEPRestInbound('test')},
          'WSBC Rest Inbound Adapter': {DeployWSBCRestInbound('test')},
          'IA Search Adapter': {DeployIASearchAdapter('test')},
          'BCHydro Rest Adapter': {DeployRestAdapter('bchydro','test')},
          'BCHydro Web Adapter': {DeployWebAdapter('bchydro','test')},
          'Cornet Web Adapter': {DeployWebAdapter('cornet','test')},
          'ICBC Rest Adapter': {DeployRestAdapter('icbc','test')},
          'ICBC Web Adapter': {DeployWebAdapter('icbc','test')},
          'MHSD Rest Adapter': {DeployRestAdapter('mhsd','test')},
          'MHSD Web Adapter': {DeployWebAdapter('mhsd','test')},
          'MOH Demographics Rest Adapter': {DeployRestAdapter('moh-demo','test')},
          'MOH Demographics Web Adapter': {DeployWebAdapter('moh-demo','test')},
          'MOH EMP Rest Adapter': {DeployRestAdapter('moh-emp','test')},
          'MOH EMP Web Adapter': {DeployWebAdapter('moh-emp','test')},
          'MOH RP Rest Adapter': {DeployRestAdapter('moh-rp','test')},
          'MOH RP Web Adapter': {DeployWebAdapter('moh-rp','test')},
          'WSBC Web Adapter': {DeployWebAdapter('wsbc','test')},
          'JCA File Adapter': {DeployFileAdapter('jca','test')}
        )
      }
    }
    stage('Deploy to Prod?') {
      steps {
        script {
              def IS_APPROVED = input(message: "Deploy to Prod?", ok: "yes", parameters: [string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to Test?')])
              if (IS_APPROVED != 'yes') {
                currentBuild.result = "ABORTED"
                error "User cancelled"
              }
          }
      }
    }
    stage('Prod Deploy') {
      steps {
        parallel(
          'Redis': {DeployRedis('prod')},
          'RequestAPI': {DeployRequestAPI('prod')},
          'SearchAPI': {DeploySearchAPI('prod')},
          'Dynadapter': {DeployDynadapter('prod')},
          'FMEP Rest Inbound Adapter': {DeployFMEPRestInbound('prod')},
          'WSBC Rest Inbound Adapter': {DeployWSBCRestInbound('prod')},
          'IA Search Adapter': {DeployIASearchAdapter('prod')},
          'BCHydro Rest Adapter': {DeployRestAdapter('bchydro','prod')},
          'BCHydro Web Adapter': {DeployWebAdapter('bchydro','prod')},
          'Cornet Web Adapter': {DeployWebAdapter('cornet','prod')},
          'ICBC Rest Adapter': {DeployRestAdapter('icbc','prod')},
          'ICBC Web Adapter': {DeployWebAdapter('icbc','prod')},
          'MHSD Rest Adapter': {DeployRestAdapter('mhsd','prod')},
          'MHSD Web Adapter': {DeployWebAdapter('mhsd','prod')},
          'MOH Demographics Rest Adapter': {DeployRestAdapter('moh-demo','prod')},
          'MOH Demographics Web Adapter': {DeployWebAdapter('moh-demo','prod')},
          'MOH EMP Rest Adapter': {DeployRestAdapter('moh-emp','prod')},
          'MOH EMP Web Adapter': {DeployWebAdapter('moh-emp','prod')},
          'MOH RP Rest Adapter': {DeployRestAdapter('moh-rp','prod')},
          'MOH RP Web Adapter': {DeployWebAdapter('moh-rp','prod')},
          'WSBC Web Adapter': {DeployWebAdapter('wsbc','prod')},
          'JCA File Adapter': {DeployFileAdapter('jca','prod')}
        )
      }
    }
    
  }
}

// ===================================================================================================
// Utility Functions
// ---------------------------------------------------------------------------------------------------

def Build(bc){
  sh "oc start-build ${bc} -n ${TOOLS_NAMESPACE} --wait"
}

def TagImage(image, environment){
  echo "Tagging '${image}' for '${environment}' environment."
  sh "oc tag ${image}:latest ${image}:${environment} -n ${TOOLS_NAMESPACE}"
}

def WaitForDeploy(selector, namespace) {
 echo "Waiting for ${selector} to be deployed in ${namespace}..."
 sh "oc wait dc/${selector} --for=condition=Available --timeout=300s -n ${namespace}"
}


// ===================================================================================================
// Process BuildConfig: Generic ImageStream
// ---------------------------------------------------------------------------------------------------
def _ProcessGenericIS(appName){
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/generic.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p appName=${appName}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: SearchAPI
// ---------------------------------------------------------------------------------------------------

def ProcessSearchAPI(){
  _ProcessGenericIS("search-api")

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/search-api.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: DynAdapter
// ---------------------------------------------------------------------------------------------------
def ProcessDynadapter(){
  _ProcessGenericIS("dynadapter")

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/dynadapter.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: RequestAPI
// ---------------------------------------------------------------------------------------------------
def ProcessRequestAPI(){
  _ProcessGenericIS("request-api")
  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/request-api.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: Web/Rest Adapters
// ---------------------------------------------------------------------------------------------------

def ProcessAdapter(type, dataPartner){
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/${type}-adapter.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/${type}-adapter.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: IA Search
// ---------------------------------------------------------------------------------------------------

def ProcessIASearch(){
  _ProcessGenericIS("ia-search-web-adapter")

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/ia-search-web-adapter.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: FMEP Rest Inbound
// ---------------------------------------------------------------------------------------------------

def ProcessFMEPRestInbound(){
  dataPartner="fmep"
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/rest-inbound-adapter.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/fams-request-inbound-adapter.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: WSBC Rest Inbound
// ---------------------------------------------------------------------------------------------------

def ProcessWSBCRestInbound(){
  dataPartner="wsbc"
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/rest-inbound-adapter.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/rest-inbound-adapter.yaml \
    -p gitRef=${GIT_REF} \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

}

// ===================================================================================================
// Deploy: Jaeger
// ---------------------------------------------------------------------------------------------------
def DeployJaeger(environment){
  echo "Configuring Jaeger"
  sh "oc process -o=yaml \
    -f ../templates/jaeger-aio.dc.yaml \
    | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
}

// ===================================================================================================
// Deploy: Redis
// ---------------------------------------------------------------------------------------------------
def DeployRedis(environment){
  echo "Configuring Redis"
  sh "oc process -o=yaml \
    -f ../templates/jaeger-aio.dc.yaml \
    | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  sh "oc process -o=yaml \
    -f ../templates/redis/redis-persistent-commander.dc.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX} \
    -p TAG=${environment}  \
    | oc apply -f - "

  // # for prod
  // oc process -o=yaml \
  //   -f ../templates/redis/redis-persistent.dc.yaml \
  //   -p namespacePrefix=${NAMESPACE_PREFIX} \
  //   -p TAG=${NAMESPACE_SUFFIX}  \
  //   | oc apply -f -
}

// ===================================================================================================
// Deploy: SearchAPI
// ---------------------------------------------------------------------------------------------------
def DeploySearchAPI(environment){
  echo "Configuring SearchAPI"
  sh "oc process -f ../templates/applications/deployments/search-api.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  sh "oc process -f ../templates/applications/services/search-api.yaml \
      | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/routes/search-api.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  TagImage('search-api',environment)
}

// ===================================================================================================
// Deploy: Dynadapter
// ---------------------------------------------------------------------------------------------------
def DeployDynadapter(environment){
  echo "Configuring Dynadapter"
  sh "oc process -f ../templates/applications/deployments/dynadapter.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/services/dynadapter.yaml \
      | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/routes/dynadapter.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  TagImage('dynadapter',environment)
}

// ===================================================================================================
// Deploy: RequestAPI
// ---------------------------------------------------------------------------------------------------
def DeployRequestAPI(environment){
  echo "Configuring RequestAPI"
  sh "oc process -f ../templates/applications/deployments/request-api.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/services/request-api.yaml \
      | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/routes/request-api.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  TagImage('request-api',environment)
}

// ===================================================================================================
// Deploy: IA Search Adapter
// ---------------------------------------------------------------------------------------------------
def DeployIASearchAdapter(environment){
  echo "Configuring IA Search Adapter"
  sh "oc process -f ../templates/applications/deployments/ia-search-web-adapter.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/services/ia-search-web-adapter.yaml \
      | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/routes/ia-search-web-adapter.yaml \
      -p namespacePrefix=${NAMESPACE_PREFIX}-${environment} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  TagImage('ia-search-web-adapter',environment)
}

// ===================================================================================================
// Deploy: FMEP Rest Inbound Adapter
// ---------------------------------------------------------------------------------------------------
def DeployFMEPRestInbound(environment){
  echo "Configuring FMEP Rest Inbound Adapter"

  def dataPartner='fmep'
  sh "oc process -f ../templates/applications/deployments/fmep-rest-inbound-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/services/rest-inbound-adapter.yaml \
      -p dataPartnerService=${dataPartner} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  sh "oc process -f ../templates/applications/routes/rest-inbound-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  TagImage('fmep-rest-inbound-adapter',environment)
}

// ===================================================================================================
// Deploy: WSBC Rest Inbound Adapter
// ---------------------------------------------------------------------------------------------------
def DeployWSBCRestInbound(environment){
  dataPartner='wsbc'

  sh "oc process -f ../templates/applications/deployments/rest-inbound-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  sh "oc process -f ../templates/applications/services/rest-inbound-adapter.yaml \
      -p dataPartnerService=${dataPartner} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  sh "oc process -f ../templates/applications/routes/rest-inbound-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  TagImage('wsbc-rest-inbound-adapter', environment)
}

// ===================================================================================================
// Deploy: Web Adapter
// ---------------------------------------------------------------------------------------------------
def DeployWebAdapter(dataPartner, environment){
  echo "Configuring '${dataPartner}' Web Adapter"
  sh "oc process -f ../templates/applications/deployments/web-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  sh "oc process -f ../templates/applications/services/web-adapter.yaml \
      -p dataPartnerService=${dataPartner} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  sh "oc process -f ../templates/applications/routes/web-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  TagImage("${dataPartner}-web-adapter", environment)
}

// ===================================================================================================
// Deploy: Rest Adapter
// ---------------------------------------------------------------------------------------------------
def DeployRestAdapter(dataPartner, environment){
  echo "Configuring '${dataPartner}' Rest Adapter"
  sh "oc process -f ../templates/applications/deployments/rest-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  sh "oc process -f ../templates/applications/services/rest-adapter.yaml \
      -p dataPartnerService=${dataPartner} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  sh "oc process -f ../templates/applications/routes/rest-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  TagImage("${dataPartner}-rest-adapter", environment)
}

// ===================================================================================================
// Deploy: File Adapter
// ---------------------------------------------------------------------------------------------------
def DeployFileAdapter(dataPartner, environment){
  sh "oc process -f ../templates/applications/deployments/file-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"

  sh "oc process -f ../templates/applications/services/file-adapter.yaml \
      -p dataPartnerService=${dataPartner} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  
  sh "oc process -f ../templates/applications/routes/file-adapter.yaml \
      -p dataPartnerService=${dataPartner} \
      -p namespacePrefix=${NAMESPACE_PREFIX} \
      -p TAG=${environment} | oc apply -f - -n ${NAMESPACE_PREFIX}-${environment}"
  TagImage("${dataPartner}-file-adapter", environment)
}


