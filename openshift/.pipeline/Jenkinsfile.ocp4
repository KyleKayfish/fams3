#!/usr/bin/env groovy

//ENV Vars
NAMESPACE_PREFIX = "dfb30e"
TOOLS_NAMESPACE = "dfb30e-tools"
DEV_NAMESPACE = "dfb30e-dev"
TEST_NAMESPACE = "dfb30e-test"
PROD_NAMESPACE = "dfb30e-prod"

DOMAIN = "apps.silver.devops.gov.bc.ca"
SUBDOMAIN = "fams3"

GIT_URI = "https://github.com/bcgov/fams3.git"
GIT_REF = "ocp4"

PRIVATE_GIT_URI = "git@github.com:bcgov-c/fams3-openshift.git"
PRIVATE_GIT_REF = "ocp4"
PRIVATE_GIT_SECRET = "fams3-github-key"


def StartBuildAndWait(selector, namespace) {
 echo "Starting build for ${selector} to in ${namespace}..."
 sh "oc start-build ${selector} -n ${namespace} --wait --follow"
 echo "Build complete!"
}

def WaitForDeploy(selector, namespace) {
 echo "Waiting for ${selector} to be deployed in ${namespace}..."
 sh "oc wait dc/${selector} --for=condition=Available --timeout=300s -n ${namespace}"
}


// ===================================================================================================
// Process BuildConfig: Generic ImageStream
// ---------------------------------------------------------------------------------------------------
def _ProcessGenericImage(appName){
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/generic.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p appName=${appName}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: SearchAPI
// ---------------------------------------------------------------------------------------------------

def ProcessSearchAPI(){
  // Image stream
  _ProcessGenericImage("search-api")

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/search-api.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: DynAdapter
// ---------------------------------------------------------------------------------------------------
def ProcessDynadapter(){
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/generic.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p appName=dynadapter  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/dynadapter.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: RequestAPI
// ---------------------------------------------------------------------------------------------------
def ProcessRequestAPI(){
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/generic.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p appName=request-api \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/request-api.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: Web/Rest Adapters
// ---------------------------------------------------------------------------------------------------

def ProcessAdapter(type, dataPartner){
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/${type}-adapter.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/${type}-adapter.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: IA Search
// ---------------------------------------------------------------------------------------------------

def ProcessIASearch(){
  appName="ia-search-web-adapter"
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/generic.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p appName=${appName}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/ia-search-web-adapter.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: FMEP Rest Inbound
// ---------------------------------------------------------------------------------------------------

def ProcessFMEPRestInbound(){
  dataPartner="fmep"
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/rest-inbound-adapter.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/fams-request-inbound-adapter.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"
}

// ===================================================================================================
// Process BuildConfig: WSBC Rest Inbound
// ---------------------------------------------------------------------------------------------------

def ProcessWSBCRestInbound(){
  dataPartner="wsbc"
  // Image stream
  sh "oc process -o=yaml \
    -f openshift/templates/builds/images/rest-inbound-adapter.yaml \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

  // Build config
  sh "oc process -o=yaml \
    -f openshift/templates/builds/builds/rest-inbound-adapter.yaml \
    -p gitRef=ocp4 \
    -p namespacePrefix=${NAMESPACE_PREFIX}  \
    -p dataPartnerService=${dataPartner}  \
    | oc apply -f - -n ${TOOLS_NAMESPACE}"

}

// ===================================================================================================
// Build Function
// ---------------------------------------------------------------------------------------------------
def Build(bc){
  sh "oc start-build ${bc} -n ${TOOLS_NAMESPACE} --wait"
}


// ===================================================================================================
// PIPELINE
// ---------------------------------------------------------------------------------------------------

pipeline {
  agent any
  stages {
    stage('Process Build Configs'){
      steps {
        ProcessSearchAPI()
        ProcessRequestAPI()
        ProcessDynadapter()
        ProcessFMEPRestInbound()
        ProcessIASearch()
        ProcessAdapter('rest','bchydro')
        ProcessAdapter('web','bchydro')
        ProcessAdapter('web','cornet')
        ProcessAdapter('rest','icbc')
        ProcessAdapter('web','icbc')
        ProcessAdapter('rest','mhsd')
        ProcessAdapter('web','mhsd')
        ProcessAdapter('web','moh-demo')
        ProcessAdapter('rest','moh-demo')
        ProcessAdapter('rest','moh-emp')
        ProcessAdapter('web','moh-emp')
        ProcessAdapter('rest','moh-rp')
        ProcessAdapter('web','moh-rp')
        ProcessAdapter('web','wsbc')
        ProcessAdapter('file','jca')
      }
    }
    stage('Build (Pt 1)') {
      steps {
        parallel(
          'Search API': {Build('search-api')},
          'Request API': {Build('request-api')},
          'Dynadapter': {Build('dynadapter')},
          'FMEP Rest Inbound Adapter': {Build('fmep-rest-inbound-adapter')},
          'WSBC Rest Inbound Adapter': {Build('wsbc-rest-inbound-adapter')},
          'IA Search Adapter': {Build('ia-search-web-adapter')},
        )
      }
    }
    stage('Build (Pt 2)') {
      steps {
        parallel(
          'BCHydro Rest Adapter': {Build('bchydro-rest-adapter')},
          'BCHydro Web Adapter': {Build('bchydro-web-adapter')},
          'Cornet Web Adapter': {Build('cornet-web-adapter')},
          'ICBC Rest Adapter': {Build('icbc-rest-adapter')},
          'ICBC Web Adapter': {Build('icbc-web-adapter')},
          'MHSD Rest Adapter': {Build('mhsd-rest-adapter')},
          'MHSD Web Adapter': {Build('mhsd-web-adapter')},
        )
      }
    }
    stage('Build (Pt 3)') {
      steps {
        parallel(
          'MOH Demographics Rest Adapter': {Build('moh-demo-rest-adapter')},
          'MOH Demographics Web Adapter': {Build('moh-demo-web-adapter')},
          'MOH EMP Rest Adapter': {Build('moh-emp-rest-adapter')},
          'MOH EMP Web Adapter': {Build('moh-emp-web-adapter')},
          'MOH RP Rest Adapter': {Build('moh-rp-rest-adapter')},
          'MOH RP Web Adapter': {Build('moh-rp-web-adapter')},
          'WSBC Web Adapter': {Build('wsbc-web-adapter')},
          'JCA File Adapter': {Build('jca-file-adapter')}
        )
      }
    }
  }
}